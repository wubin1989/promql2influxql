// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PromServiceClient is the client API for PromService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromServiceClient interface {
	// Query is compatible to Prometheus POST /api/v1/query
	QueryRpc(ctx context.Context, in *QueryRpcRequest, opts ...grpc.CallOption) (*QueryRpcResponse, error)
	// GetQuery is compatible to Prometheus GET /api/v1/query
	GetQueryRpc(ctx context.Context, in *GetQueryRpcRequest, opts ...grpc.CallOption) (*GetQueryRpcResponse, error)
	// Query_range is compatible to Prometheus POST /api/v1/query_range
	QueryRangeRpc(ctx context.Context, in *QueryRangeRpcRequest, opts ...grpc.CallOption) (*QueryRangeRpcResponse, error)
	// GetQuery_range is compatible to Prometheus GET /api/v1/query_range
	GetQueryRangeRpc(ctx context.Context, in *GetQueryRangeRpcRequest, opts ...grpc.CallOption) (*GetQueryRangeRpcResponse, error)
	// GetLabel_Label_nameValues Returns label values
	// The following endpoint returns a list of label values for a provided label name
	//
	// The "data" section of the JSON response is a list of string label values.
	//
	GetLabelLabelNameValuesRpc(ctx context.Context, in *GetLabelLabelNameValuesRpcRequest, opts ...grpc.CallOption) (*GetLabelLabelNameValuesRpcResponse, error)
}

type promServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPromServiceClient(cc grpc.ClientConnInterface) PromServiceClient {
	return &promServiceClient{cc}
}

func (c *promServiceClient) QueryRpc(ctx context.Context, in *QueryRpcRequest, opts ...grpc.CallOption) (*QueryRpcResponse, error) {
	out := new(QueryRpcResponse)
	err := c.cc.Invoke(ctx, "/prom.PromService/QueryRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promServiceClient) GetQueryRpc(ctx context.Context, in *GetQueryRpcRequest, opts ...grpc.CallOption) (*GetQueryRpcResponse, error) {
	out := new(GetQueryRpcResponse)
	err := c.cc.Invoke(ctx, "/prom.PromService/GetQueryRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promServiceClient) QueryRangeRpc(ctx context.Context, in *QueryRangeRpcRequest, opts ...grpc.CallOption) (*QueryRangeRpcResponse, error) {
	out := new(QueryRangeRpcResponse)
	err := c.cc.Invoke(ctx, "/prom.PromService/QueryRangeRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promServiceClient) GetQueryRangeRpc(ctx context.Context, in *GetQueryRangeRpcRequest, opts ...grpc.CallOption) (*GetQueryRangeRpcResponse, error) {
	out := new(GetQueryRangeRpcResponse)
	err := c.cc.Invoke(ctx, "/prom.PromService/GetQueryRangeRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promServiceClient) GetLabelLabelNameValuesRpc(ctx context.Context, in *GetLabelLabelNameValuesRpcRequest, opts ...grpc.CallOption) (*GetLabelLabelNameValuesRpcResponse, error) {
	out := new(GetLabelLabelNameValuesRpcResponse)
	err := c.cc.Invoke(ctx, "/prom.PromService/GetLabelLabelNameValuesRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromServiceServer is the server API for PromService service.
// All implementations must embed UnimplementedPromServiceServer
// for forward compatibility
type PromServiceServer interface {
	// Query is compatible to Prometheus POST /api/v1/query
	QueryRpc(context.Context, *QueryRpcRequest) (*QueryRpcResponse, error)
	// GetQuery is compatible to Prometheus GET /api/v1/query
	GetQueryRpc(context.Context, *GetQueryRpcRequest) (*GetQueryRpcResponse, error)
	// Query_range is compatible to Prometheus POST /api/v1/query_range
	QueryRangeRpc(context.Context, *QueryRangeRpcRequest) (*QueryRangeRpcResponse, error)
	// GetQuery_range is compatible to Prometheus GET /api/v1/query_range
	GetQueryRangeRpc(context.Context, *GetQueryRangeRpcRequest) (*GetQueryRangeRpcResponse, error)
	// GetLabel_Label_nameValues Returns label values
	// The following endpoint returns a list of label values for a provided label name
	//
	// The "data" section of the JSON response is a list of string label values.
	//
	GetLabelLabelNameValuesRpc(context.Context, *GetLabelLabelNameValuesRpcRequest) (*GetLabelLabelNameValuesRpcResponse, error)
	mustEmbedUnimplementedPromServiceServer()
}

// UnimplementedPromServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPromServiceServer struct {
}

func (UnimplementedPromServiceServer) QueryRpc(context.Context, *QueryRpcRequest) (*QueryRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRpc not implemented")
}
func (UnimplementedPromServiceServer) GetQueryRpc(context.Context, *GetQueryRpcRequest) (*GetQueryRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryRpc not implemented")
}
func (UnimplementedPromServiceServer) QueryRangeRpc(context.Context, *QueryRangeRpcRequest) (*QueryRangeRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRangeRpc not implemented")
}
func (UnimplementedPromServiceServer) GetQueryRangeRpc(context.Context, *GetQueryRangeRpcRequest) (*GetQueryRangeRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryRangeRpc not implemented")
}
func (UnimplementedPromServiceServer) GetLabelLabelNameValuesRpc(context.Context, *GetLabelLabelNameValuesRpcRequest) (*GetLabelLabelNameValuesRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelLabelNameValuesRpc not implemented")
}
func (UnimplementedPromServiceServer) mustEmbedUnimplementedPromServiceServer() {}

// UnsafePromServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromServiceServer will
// result in compilation errors.
type UnsafePromServiceServer interface {
	mustEmbedUnimplementedPromServiceServer()
}

func RegisterPromServiceServer(s grpc.ServiceRegistrar, srv PromServiceServer) {
	s.RegisterService(&PromService_ServiceDesc, srv)
}

func _PromService_QueryRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServiceServer).QueryRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prom.PromService/QueryRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServiceServer).QueryRpc(ctx, req.(*QueryRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromService_GetQueryRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServiceServer).GetQueryRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prom.PromService/GetQueryRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServiceServer).GetQueryRpc(ctx, req.(*GetQueryRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromService_QueryRangeRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRangeRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServiceServer).QueryRangeRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prom.PromService/QueryRangeRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServiceServer).QueryRangeRpc(ctx, req.(*QueryRangeRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromService_GetQueryRangeRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryRangeRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServiceServer).GetQueryRangeRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prom.PromService/GetQueryRangeRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServiceServer).GetQueryRangeRpc(ctx, req.(*GetQueryRangeRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromService_GetLabelLabelNameValuesRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelLabelNameValuesRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromServiceServer).GetLabelLabelNameValuesRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prom.PromService/GetLabelLabelNameValuesRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromServiceServer).GetLabelLabelNameValuesRpc(ctx, req.(*GetLabelLabelNameValuesRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PromService_ServiceDesc is the grpc.ServiceDesc for PromService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PromService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prom.PromService",
	HandlerType: (*PromServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryRpc",
			Handler:    _PromService_QueryRpc_Handler,
		},
		{
			MethodName: "GetQueryRpc",
			Handler:    _PromService_GetQueryRpc_Handler,
		},
		{
			MethodName: "QueryRangeRpc",
			Handler:    _PromService_QueryRangeRpc_Handler,
		},
		{
			MethodName: "GetQueryRangeRpc",
			Handler:    _PromService_GetQueryRangeRpc_Handler,
		},
		{
			MethodName: "GetLabelLabelNameValuesRpc",
			Handler:    _PromService_GetLabelLabelNameValuesRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/prom.proto",
}
