/**
* Generated by go-doudou v2.0.4.
* You can edit it as your need.
 */
package dto

//go:generate go-doudou name --file $GOFILE
// Alert Alert has info for an alert.
type Alert struct {
	ActiveAt *string `json:"activeAt"`

	Annotations *Labels `json:"annotations"`

	Labels *Labels `json:"labels"`

	State *string `json:"state"`

	Value *string `json:"value"`
}

// AlertmanagerDiscovery AlertmanagerDiscovery has all the active Alertmanagers.
type AlertmanagerDiscovery struct {
	ActiveAlertmanagers []AlertmanagerTarget `json:"activeAlertmanagers"`

	DroppedAlertmanagers []AlertmanagerTarget `json:"droppedAlertmanagers"`
}

// AlertmanagerTarget AlertmanagerTarget has info on one AM.
type AlertmanagerTarget struct {
	Url *string `json:"url"`
}

// DroppedTarget DroppedTarget has the information for one target that was dropped during relabelling.
type DroppedTarget struct {
	DiscoveredLabels map[string][]string `json:"discoveredLabels"`
}

// HeadStats HeadStats has information about the TSDB head.
type HeadStats struct {
	ChunkCount *int64 `json:"chunkCount"`

	MaxTime *int64 `json:"maxTime"`

	MinTime *int64 `json:"minTime"`

	NumLabelPairs *int64 `json:"numLabelPairs"`

	NumSeries *int `json:"numSeries"`
}

// Label Label is a key/value pair of strings.
type Label struct {
	Name *string `json:"name"`

	Value *string `json:"value"`
}

// Labels Labels is a sorted set of labels. Order has to be guaranteed upon
// instantiation.
type Labels struct {
}

// MetricType MetricType represents metric type values.
type MetricType struct {
}

// PrometheusVersion PrometheusVersion contains build information about Prometheus.
type PrometheusVersion struct {
	Branch *string `json:"branch"`

	BuildDate *string `json:"buildDate"`

	BuildUser *string `json:"buildUser"`

	GoVersion *string `json:"goVersion"`

	Revision *string `json:"revision"`

	Version *string `json:"version"`
}

// RuleDiscovery RuleDiscovery has info for all rules
type RuleDiscovery struct {
	RuleGroups []RuleGroup `json:"ruleGroups"`
}

// RuleGroup RuleGroup has info for rules which are part of a group
type RuleGroup struct {
	EvaluationTime *float64 `json:"evaluationTime"`

	File *string `json:"file"`

	Interval *float64 `json:"interval"`

	LastEvaluation *string `json:"lastEvaluation"`

	Name *string `json:"name"`
	// In order to preserve rule ordering, while exposing type (alerting or recording)
	// specific properties, both alerting and recording rules are exposed in the
	// same array.
	Rules []Rule `json:"rules"`
}

// RuntimeInfo RuntimeInfo contains runtime information about Prometheus.
type RuntimeInfo struct {
	CWD *string `json:"cWD"`

	GODEBUG *string `json:"gODEBUG"`

	GOGC *string `json:"gOGC"`

	GOMAXPROCS *int `json:"gOMAXPROCS"`

	CorruptionCount *int64 `json:"corruptionCount"`

	GoroutineCount *int `json:"goroutineCount"`

	LastConfigTime *string `json:"lastConfigTime"`

	ReloadConfigSuccess *bool `json:"reloadConfigSuccess"`

	StartTime *string `json:"startTime"`

	StorageRetention *string `json:"storageRetention"`
}

// Target Target has the information for one target.
type Target struct {
	DiscoveredLabels map[string][]string `json:"discoveredLabels"`

	GlobalURL *string `json:"globalURL"`

	Health *TargetHealth `json:"health"`

	Labels *Labels `json:"labels"`

	LastError *string `json:"lastError"`

	LastScrape *string `json:"lastScrape"`

	LastScrapeDuration *float64 `json:"lastScrapeDuration"`

	ScrapePool *string `json:"scrapePool"`

	ScrapeURL *string `json:"scrapeURL"`
}

// TargetDiscovery TargetDiscovery has all the active targets.
type TargetDiscovery struct {
	ActiveTargets []Target `json:"activeTargets"`

	DroppedTargets []DroppedTarget `json:"droppedTargets"`
}

// TargetHealth TargetHealth describes the health state of a target.
type TargetHealth struct {
}

type Metadata struct {
	Help *string `json:"help"`

	Type *MetricType `json:"type"`

	Unit *string `json:"unit"`
}

type MetricMetadata struct {
	Help *string `json:"help"`

	Metric *string `json:"metric"`

	Target *Labels `json:"target"`

	Type *MetricType `json:"type"`

	Unit *string `json:"unit"`
}

// PrometheusConfig a dumped YAML file
type PrometheusConfig struct {
	YAML *string `json:"yAML"`
}

type QueryData struct {
	Result     interface{} `json:"result"`
	ResultType string      `json:"resultType"`
}

type QueryResponse struct {
	Data   QueryData `json:"data"`
	Status string    `json:"status"`
}

type ResponseQueryExemplars struct {
	Exemplars *struct {
		Labels *struct {
			TraceID *string `json:"traceID" url:"traceID"`
		} `json:"labels" url:"labels"`
		Values    *string `json:"values" url:"values"`
		Timestamp *string `json:"timestamp" url:"timestamp"`
	} `json:"exemplars"`

	SeriesLabels *struct {
		Job      *string `json:"job" url:"job"`
		Instance *string `json:"instance" url:"instance"`
		Service  *string `json:"service" url:"service"`
		Name     *string `json:"name" url:"__name__"`
	} `json:"seriesLabels"`
}

// ResponseSeries a list of objects that contain the label name/value pairs which identify each series
type ResponseSeries struct {
}

type ResponseSnapshot struct {
	Name *string `json:"name"`
}

// ResponseTargetMetadata A list of objects
type ResponseTargetMetadata struct {
}

type Rule struct {
}

// Stat stat holds the information about individual cardinality.
type Stat struct {
	Name *string `json:"name"`

	Value *int `json:"value"`
}

// TsdbStatus tsdbStatus has information of cardinality statistics from postings.
type TsdbStatus struct {
	HeadStats *HeadStats `json:"headStats"`
	// This will provide a list of the label names and their value count.
	LabelValueCountByLabelName []Stat `json:"labelValueCountByLabelName"`
	// This will provide a list of the label names and memory used in bytes. Memory usage is calculated by adding the length of all values for a given label name.
	MemoryInBytesByLabelName []Stat `json:"memoryInBytesByLabelName"`
	// This will provide a list of label value pairs and their series count.
	SeriesCountByLabelValuePair []Stat `json:"seriesCountByLabelValuePair"`
	// This will provide a list of metrics names and their series count.
	SeriesCountByMetricName []Stat `json:"seriesCountByMetricName"`
}

type WalReplayStatus struct {
	Current *int `json:"current"`

	Max *int `json:"max"`

	Min *int `json:"min"`
}
