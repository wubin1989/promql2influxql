/**
* Generated by go-doudou v2.0.4.
* You can edit it as your need.
 */
package service

import (
	"context"
	"sync"
	"time"

	"github.com/prometheus/common/model"
	"github.com/wubin1989/promql2influxql/applications"
	"golang.org/x/exp/slices"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/cast"

	"github.com/pkg/errors"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/caller"
	"github.com/wubin1989/promql2influxql/applications/prom/config"
	"github.com/wubin1989/promql2influxql/applications/prom/dto"

	pb "github.com/wubin1989/promql2influxql/applications/prom/transport/grpc"
)

const (
	SUCCESS_STATUS = "success"
)

type QueryResponseWrapper struct {
	Result dto.QueryResponse
	Err    error
}

var _ Prom = (*PromImpl)(nil)

var _ pb.PromServiceServer = (*PromImpl)(nil)

type PromImpl struct {
	pb.UnimplementedPromServiceServer

	conf    *config.Config
	adaptor applications.IPromAdaptor
}

func (receiver *PromImpl) query(ctx context.Context, query string, t *string, resultChan chan QueryResponseWrapper) {
	var ts *time.Time
	if t != nil {
		floatT, err := cast.ToFloat64E(*t)
		if err != nil {
			resultChan <- QueryResponseWrapper{
				Err: errors.Wrap(err, caller.NewCaller().String()),
			}
			return
		}
		tmp := time.UnixMilli(int64(floatT * 1000))
		ts = &tmp
	}
	runResult, err := receiver.adaptor.Query(ctx, applications.PromCommand{
		Cmd:      query,
		Database: receiver.conf.BizConf.AdaptorInfluxDatabase,
		Start:    ts,
		End:      ts,
		Timezone: time.Local,
	})
	if err != nil {
		resultChan <- QueryResponseWrapper{
			Err: errors.Wrap(err, caller.NewCaller().String()),
		}
		return
	}
	resultChan <- QueryResponseWrapper{
		Result: dto.QueryResponse{
			Data: dto.QueryData{
				Result:     runResult.Result,
				ResultType: runResult.ResultType,
			},
			Status: SUCCESS_STATUS,
		},
	}
}

var emptyResult = dto.QueryResponse{}

func (receiver *PromImpl) Query(ctx context.Context, query string, t *string, timeout *string) (data dto.QueryData, status string, err error) {
	if timeout != nil {
		timeoutDuration, err := time.ParseDuration(*timeout)
		if err != nil {
			return emptyResult.Data, emptyResult.Status, errors.Wrap(err, caller.NewCaller().String())
		}
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeoutDuration)
		defer cancel()
	}
	resultChan := make(chan QueryResponseWrapper, 1)

	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	go func() {
		receiver.query(ctx, query, t, resultChan)
		close(resultChan)
	}()

	for {
		select {
		case <-ctx.Done():
			return emptyResult.Data, emptyResult.Status, errors.Wrap(err, caller.NewCaller().String())
		case resp := <-resultChan:
			if resp.Err != nil {
				return emptyResult.Data, emptyResult.Status, errors.Wrap(err, caller.NewCaller().String())
			}
			result := resp.Result
			return result.Data, result.Status, nil
		}
	}
}
func (receiver *PromImpl) GetQuery(ctx context.Context, query string, time *string, timeout *string) (data dto.QueryData, status string, err error) {
	return receiver.Query(ctx, query, time, timeout)
}

func (receiver *PromImpl) query_range(ctx context.Context, query string, start *string, end *string, step *string, resultChan chan QueryResponseWrapper) {
	var startTs, endTs *time.Time
	var err error
	if start != nil {
		floatT, err := cast.ToFloat64E(*start)
		if err != nil {
			resultChan <- QueryResponseWrapper{
				Err: errors.Wrap(err, caller.NewCaller().String()),
			}
			return
		}
		tmp := time.UnixMilli(int64(floatT * 1000))
		startTs = &tmp
	}
	if end != nil {
		floatT, err := cast.ToFloat64E(*end)
		if err != nil {
			resultChan <- QueryResponseWrapper{
				Err: errors.Wrap(err, caller.NewCaller().String()),
			}
			return
		}
		tmp := time.UnixMilli(int64(floatT * 1000))
		endTs = &tmp
	}
	cmd := applications.PromCommand{
		Cmd:      query,
		Database: receiver.conf.BizConf.AdaptorInfluxDatabase,
		Start:    startTs,
		End:      endTs,
		Timezone: time.Local,
		DataType: applications.GRAPH_DATA,
	}
	if step != nil {
		if cmd.Step, err = time.ParseDuration(*step + "s"); err != nil {
			resultChan <- QueryResponseWrapper{
				Err: errors.Wrap(err, caller.NewCaller().String()),
			}
			return
		}
	}
	runResult, err := receiver.adaptor.Query(ctx, cmd)
	if err != nil {
		resultChan <- QueryResponseWrapper{
			Err: errors.Wrap(err, caller.NewCaller().String()),
		}
		return
	}
	resultChan <- QueryResponseWrapper{
		Result: dto.QueryResponse{
			Data: dto.QueryData{
				Result:     runResult.Result,
				ResultType: runResult.ResultType,
			},
			Status: SUCCESS_STATUS,
		},
	}
}

func (receiver *PromImpl) Query_range(ctx context.Context, query string, start *string, end *string, step *string, timeout *string) (data dto.QueryData, status string, err error) {
	if timeout != nil {
		timeoutDuration, err := time.ParseDuration(*timeout)
		if err != nil {
			return emptyResult.Data, emptyResult.Status, errors.Wrap(err, caller.NewCaller().String())
		}
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, timeoutDuration)
		defer cancel()
	}
	resultChan := make(chan QueryResponseWrapper, 1)

	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	go func() {
		receiver.query_range(ctx, query, start, end, step, resultChan)
		close(resultChan)
	}()

	for {
		select {
		case <-ctx.Done():
			return emptyResult.Data, emptyResult.Status, errors.Wrap(err, caller.NewCaller().String())
		case resp := <-resultChan:
			if resp.Err != nil {
				return emptyResult.Data, emptyResult.Status, errors.Wrap(err, caller.NewCaller().String())
			}
			result := resp.Result
			return result.Data, result.Status, nil
		}
	}
}
func (receiver *PromImpl) GetQuery_range(ctx context.Context, query string, start *string, end *string, step *string, timeout *string) (data dto.QueryData, status string, err error) {
	return receiver.Query_range(ctx, query, start, end, step, timeout)
}

func NewProm(conf *config.Config, adaptor applications.IPromAdaptor) *PromImpl {
	return &PromImpl{
		conf:    conf,
		adaptor: adaptor,
	}
}

type StringSliceResult struct {
	Result []string
	Err    error
}

func (receiver PromImpl) doLabelValuesQuery(ctx context.Context, cmd string, startTime, endTime time.Time, label_name string, resultChan chan StringSliceResult) {
	runResult, err := receiver.adaptor.Query(ctx, applications.PromCommand{
		Cmd:       cmd,
		Database:  receiver.conf.BizConf.AdaptorInfluxDatabase,
		Start:     &startTime,
		End:       &endTime,
		Timezone:  time.Local,
		DataType:  applications.LABEL_VALUES_DATA,
		LabelName: label_name,
	})
	if err != nil {
		resultChan <- StringSliceResult{
			Err: errors.Wrap(err, caller.NewCaller().String()),
		}
		return
	}
	resultChan <- StringSliceResult{
		Result: runResult.Result.([]string),
	}
}

func (receiver *PromImpl) GetLabel_Label_nameValues(ctx context.Context, start *string, end *string, match *[]string, label_name string) (data []string, status string, err error) {
	if !model.LabelNameRE.MatchString(label_name) {
		return nil, "", errors.Errorf("invalid label name: %q", label_name)
	}
	startTime, err := parseTimeParam("start", start, minTime)
	if err != nil {
		return nil, "", errors.Errorf("invalid start: %q", *start)
	}
	endTime, err := parseTimeParam("end", end, time.Now())
	if err != nil {
		return nil, "", errors.Errorf("invalid end: %q", *end)
	}

	bufferSize := 1
	if match != nil {
		bufferSize = len(*match)
	}

	resultChan := make(chan StringSliceResult, bufferSize)

	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	go func() {
		var wg sync.WaitGroup
		if match != nil {
			wg.Add(len(*match))
			for _, item := range *match {
				go func() {
					defer wg.Done()
					receiver.doLabelValuesQuery(ctx, item, startTime, endTime, label_name, resultChan)
				}()
			}
		} else {
			wg.Add(1)
			go func() {
				defer wg.Done()
				receiver.doLabelValuesQuery(ctx, "", startTime, endTime, label_name, resultChan)
			}()
		}
		wg.Wait()
		close(resultChan)
	}()

	labelValueMap := make(map[string]struct{})

LOOP:
	for {
		select {
		case <-ctx.Done():
			return nil, "", errors.Wrap(err, caller.NewCaller().String())
		case resp, ok := <-resultChan:
			if !ok {
				break LOOP
			}
			if resp.Err != nil {
				return nil, "", errors.Wrap(resp.Err, caller.NewCaller().String())
			}
			if len(resp.Result) == 0 {
				continue
			}
			for _, value := range resp.Result {
				if _, exists := labelValueMap[value]; exists {
					continue
				} else {
					labelValueMap[value] = struct{}{}
				}
				data = append(data, value)
			}
		}
	}

	slices.Sort(data)
	return data, SUCCESS_STATUS, nil
}

func (receiver *PromImpl) QueryRpc(ctx context.Context, request *pb.QueryRpcRequest) (*pb.QueryRpcResponse, error) {
	//TODO implement me
	panic("implement me")
}
func (receiver *PromImpl) GetQueryRpc(ctx context.Context, request *pb.GetQueryRpcRequest) (*pb.GetQueryRpcResponse, error) {
	//TODO implement me
	panic("implement me")
}
func (receiver *PromImpl) QueryRangeRpc(ctx context.Context, request *pb.QueryRangeRpcRequest) (*pb.QueryRangeRpcResponse, error) {
	//TODO implement me
	panic("implement me")
}
func (receiver *PromImpl) GetQueryRangeRpc(ctx context.Context, request *pb.GetQueryRangeRpcRequest) (*pb.GetQueryRangeRpcResponse, error) {
	//TODO implement me
	panic("implement me")
}
func (receiver *PromImpl) GetLabelLabelNameValuesRpc(ctx context.Context, request *pb.GetLabelLabelNameValuesRpcRequest) (*pb.GetLabelLabelNameValuesRpcResponse, error) {
	//TODO implement me
	panic("implement me")
}
